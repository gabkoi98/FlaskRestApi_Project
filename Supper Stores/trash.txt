
Thi is to crate cart
@blp.route("/register")
class UserRegister(MethodView):
    @blp.arguments(UserSchema)
    def post(self, user_data):
        if UserModel.query.filter(UserModel.username == user_data["username"]).first():
            abort(409, message="A user with that username already exists.")

        user = UserModel(
            username=user_data["username"],
            password=pbkdf2_sha256.hash(user_data["password"]),
        )
        db.session.add(user)
        db.session.commit()

        return {"message": "User created successfully."}, 201


@blp.route("/cart")
class CreateCart(MethodView):
    @blp.arguments(CartSchema)
    @blp.response(201, CartSchema)
    def post(self , cart_data):
        cart = CartModel(**cart_data)
        
        try:
            db.session.add(cart)
            db.session.commit()
        except SQLAlchemyError:
            abort(400, message="An error occurred while creating this cart")
            
        return jsonify({"Message": "Cart has been created successfully"}), 201
    
    @blp.response(200, CartSchema(many=True))
    def get(self):
        carts = CartModel.query.all()
        return carts







# This is to find all of the product 
# @blp.route("/product")
# class getallproduct(MethodView):
#     @blp.arguments(Productschema)
#     @blp.response(201, Productschema)
#     def post(self, product_data):
#         category_id  = product_data.get("catorey_id")
        
#         if not category_id:
#             abort(409, messsage="category is required")
             
#         try:
#             product  = ProductModel(**product_data)
#             product.catory_id = category_id
        
#             db.session.add(product) 
#             db.session.commit()
            
#             abort(500, message="An error occurred while inserting the product")
#         except SQLAlchemyError as e:
#             db.session.rollback()
#         return jsonify({"Message": "product has been created successfully "}) , 201 





   
    @blp.response(200, CategorySchema)
    def delete(self):
        Categories  = CategoryModel.query.all()
        
        for category in Categories:
            db.session.delete(category)
            
        try:
            db.session.commit()
        except SQLAlchemyError:
            db.session.rollback()
            abort(500, message="An error occurred while deleting the products")
        return jsonify({"Message": "Products are deleted successfully"}), 204

            